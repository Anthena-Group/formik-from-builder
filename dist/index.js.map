{"version":3,"sources":["../src/fields/field-text/field-text.tsx","../src/fields/field-multitext/field-multitext.tsx","../src/fields/field-checkbox/field-checkbox.tsx","../src/fields/field-radio/field-radio.tsx","../src/types/input-types.ts","../src/hooks/useFormBuilder.ts","../src/form-builder.tsx"],"names":["React","TextField","useField","FieldText","_a","_b","name","props","__objRest","field","meta","__spreadProps","__spreadValues","FieldMultiText","Checkbox","FormControl","FormControlLabel","FormGroup","FormHelperText","FormLabel","FieldCheckBox","groupLabel","options","helpers","handleChange","event","value","checked","newValue","v","option","Radio","RadioGroup","FieldRadio","InputTypes","Yup","useFormBuilder","fields","schemaFields","initailValues","_c","_d","validator","getFieldByType","index","fieldName","fieldKey","FormBuilder","group","dataTestId"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport TextField, { TextFieldProps } from '@mui/material/TextField'\r\nimport { useField } from \"formik\";\r\n\r\n\r\ntype FieldTextProps = TextFieldProps & {\r\n    name: string;\r\n}\r\n\r\nexport const FieldText: React.FC<FieldTextProps> = ({ name, ...props }) => {\r\n    const [field, meta] = useField(name);\r\n    return (\r\n        <TextField\r\n            {...field} \r\n            {...props}\r\n            error={Boolean(meta.touched && meta.error)} // Show error if touched and there's an error\r\n            helperText={meta.touched && meta.error ? meta.error : undefined} // Show error message if touched and there's an error\r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport TextField, { TextFieldProps } from '@mui/material/TextField'\r\nimport { useField } from \"formik\";\r\n\r\n\r\ntype FieldMultiTextProps = TextFieldProps & {\r\n    name: string;\r\n}\r\n\r\nexport const FieldMultiText: React.FC<FieldMultiTextProps> = ({ name, ...props }) => {\r\n    const [field, meta] = useField(name);\r\n\r\n    return (\r\n        <TextField\r\n            multiline\r\n            {...field} \r\n            {...props}\r\n            error={Boolean(meta.touched && meta.error)} // Show error if touched and there's an error\r\n            helperText={meta.touched && meta.error ? meta.error : undefined} // Show error message if touched and there's an error\r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormHelperText, FormLabel } from '@mui/material';\r\nimport { useField } from 'formik';\r\nimport { FieldCheckBoxProps } from '../../types';\r\n\r\n\r\nexport const FieldCheckBox: React.FC<FieldCheckBoxProps> = ({ name, groupLabel, options, ...props }) => {\r\n    const [field, meta, helpers] = useField(name);\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { value, checked } = event.target;\r\n        const newValue = checked\r\n            ? [...field.value, value] // Add value if checked\r\n            : field.value.filter((v: string) => v !== value); // Remove value if unchecked\r\n\r\n        helpers.setValue(newValue); // Update Formik state\r\n    };\r\n\r\n    return (\r\n        <FormControl component=\"fieldset\" error={Boolean(meta.touched && meta.error)}>\r\n            <FormLabel component=\"legend\">{groupLabel}</FormLabel>\r\n            <FormGroup>\r\n                {options?.map((option) => (\r\n                    <FormControlLabel\r\n                        key={option.value}\r\n                        control={\r\n                            <Checkbox\r\n                                {...props}\r\n                                value={option.value}\r\n                                checked={field.value.includes(option.value)} // Check if the value is in the array\r\n                                onChange={handleChange} // Handle change event\r\n                            />\r\n                        }\r\n                        label={option.label}\r\n                    />\r\n                ))}\r\n            </FormGroup>\r\n            {meta.touched && meta.error ? (\r\n                <FormHelperText>{meta.error}</FormHelperText> // Display error message if applicable\r\n            ) : null}\r\n        </FormControl>\r\n    );\r\n};","import { FormControl, FormControlLabel, FormHelperText, FormLabel, Radio, RadioGroup } from '@mui/material';\r\nimport { useField } from 'formik';\r\nimport React from 'react';\r\nimport { FieldRadioProps } from '../../types';\r\n\r\n\r\nexport const FieldRadio: React.FC<FieldRadioProps> = ({ name, groupLabel, options, ...props }) => {\r\n    const [field, meta] = useField(name);\r\n\r\n    return (\r\n        <FormControl component=\"fieldset\" error={Boolean(meta.touched && meta.error)}>\r\n            <FormLabel component=\"legend\">{groupLabel}</FormLabel>\r\n            <RadioGroup\r\n                aria-labelledby=\"radio-buttons-group-label\"\r\n                name={name}\r\n                value={field.value} // Set the value from Formik state\r\n                onChange={field.onChange} // Handle change event\r\n            >\r\n                {options.map((option) => (\r\n                    <FormControlLabel\r\n                        key={option.value}\r\n                        value={option.value}\r\n                        control={<Radio\r\n                            {...props}\r\n                        />}\r\n                        label={option.label}\r\n                    />\r\n                ))}\r\n            </RadioGroup>\r\n            {meta.touched && meta.error ? (\r\n                <FormHelperText>{meta.error}</FormHelperText> // Display error message if applicable\r\n            ) : null}\r\n        </FormControl>\r\n\r\n\r\n    );\r\n};","export enum InputTypes {\r\n    TEXT = \"text\",\r\n    MULTI_TEXT = \"multi-text\",\r\n    CHECKBOX = \"checkbox\",\r\n    RADIO = \"radio\",\r\n    DROPDOWN = \"dropdown\",\r\n    DATE = \"date\",\r\n}","import * as Yup from 'yup';\r\nimport { FieldType, InputTypes } from '../types';\r\nimport { FormikValues } from 'formik';\r\n\r\nexport const useFormBuilder = (fields: FieldType[]) => {\r\n  const schemaFields: Record<string, any> = {};\r\n  const initailValues: FormikValues = {};\r\n\r\n  fields.forEach((field) => {\r\n\r\n    let validator:any;\r\n\r\n    switch(field.type) {\r\n        case InputTypes.CHECKBOX:\r\n            validator = Yup.array();\r\n            break;\r\n        default:\r\n            validator = Yup.string();\r\n            break;\r\n    }\r\n\r\n    if (field.validation?.required) {\r\n      validator = validator.required(\r\n        field.validation.message || 'This field is required'\r\n      );\r\n    }\r\n\r\n    if (field.validation?.minLength) {\r\n      validator = validator.min(\r\n        field.validation.minLength,\r\n        field.validation.message ||\r\n          `Minimum length is ${field.validation.minLength}`\r\n      );\r\n    }\r\n\r\n    if (field.validation?.maxLength) {\r\n      validator = validator.max(\r\n        field.validation.maxLength,\r\n        field.validation.message ||\r\n          `Maximum length is ${field.validation.maxLength}`\r\n      );\r\n    }\r\n\r\n    if (field.validation?.pattern) {\r\n      validator = validator.matches(\r\n        field.validation.pattern,\r\n        field.validation.message || 'Invalid format'\r\n      );\r\n    }\r\n\r\n    schemaFields[field.field] = validator;\r\n    initailValues[field.field] = field.initialValue;\r\n  });\r\n\r\n  return {\r\n    yupSchemaValidation: Yup.object().shape(schemaFields),\r\n    initailValues,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { FieldCheckBox, FieldMultiText, FieldRadio, FieldText } from \"./fields\";\r\nimport { FieldType, InputTypes } from \"./types\";\r\n\r\ninterface FormBuilderProps {\r\n    group: string;\r\n    fields: FieldType[];\r\n    \"data-test\": string;\r\n}\r\n\r\nconst getFieldByType = (name: string, field: FieldType, index: number) => {\r\n    const fieldName = `${field.field}`;\r\n    const fieldKey = `${name}-${field.field}-${index}`;\r\n    switch (field.type) {\r\n        case InputTypes.TEXT:\r\n            return <FieldText key={fieldKey} name={fieldName} label={field.label} {...field.muiProps} />;\r\n        case InputTypes.CHECKBOX:\r\n            return <FieldCheckBox key={fieldKey} name={fieldName} options={field.options}\r\n                {...field.muiProps} groupLabel={field.groupLabel}/>;\r\n        case InputTypes.RADIO:\r\n            return <FieldRadio key={fieldKey} name={fieldName}\r\n                groupLabel={field.groupLabel} {...field.muiProps} options={field.options} />;\r\n        case InputTypes.MULTI_TEXT:\r\n            return <FieldMultiText key={fieldKey} name={fieldName} label={field.label} {...field.muiProps} />;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport const FormBuilder: React.FC<FormBuilderProps> = ({ group, fields, \"data-test\": dataTestId }) => {\r\n    return (\r\n        <div data-test={dataTestId}>\r\n            {fields.map((field, index) => getFieldByType(group, field, index))}\r\n        </div>\r\n    )\r\n}\r\n"]}